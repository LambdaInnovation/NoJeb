buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

apply plugin: 'maven'

version = "0.1"
group = "cn.nojeb" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "NoJeb"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

compileJava.options.encoding = "UTF-8"

minecraft {
    version = "1.12.2-14.23.2.2618"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    replace "@VERSION@", version
}

dependencies {
    compile files('jars/NoJeb-PluginLoader.jar')
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    from configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    exclude 'log4j2-test.xml'
    exclude 'dummyThing'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    classifier 'dev'
    from sourceSets.main.output
    manifest {
        attributes 'FMLCorePluginContainsFMLMod' : 'true'
        attributes 'FMLCorePlugin' : 'cn.nojeb.CorePlugin'
    }
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

build.dependsOn deobfJar
build.dependsOn sourceJar 
install.dependsOn build
